name: Create Release and Upload Assets

on:
  push:

# 定义工作流中的任务
jobs:
  build-and-release:
    # 任务名称
    name: Build and Release
    # 运行此任务的操作系统环境
    runs-on: ubuntu-latest
    # 为此任务授予创建 Release 和写入内容的权限
    permissions:
      contents: write

    # 任务执行步骤
    steps:
      # 步骤一：签出仓库代码
      # 以便工作流可以访问你的 cf-helper.sh 脚本
      - name: Checkout code
        uses: actions/checkout@v4

      # 步骤二：准备构建环境和变量
      # 定义架构列表，并创建用于存放打包文件的目录
      - name: Setup Build Environment
        id: setup
        run: |

          echo "ARCHS=linux-amd64 linux-arm64 linux-arm" >> $GITHUB_ENV
          mkdir -p release_assets

      # 步骤三：下载、打包并准备发行版文件
      # 循环处理每一种架构
      - name: Download, Package, and Prepare Assets
        run: |
          for arch in $ARCHS; do
            # 提取架构的简称 (amd64, arm64, arm)
            short_arch=$(echo "$arch" | sed 's/linux-//')

            echo "--- Processing architecture: ${short_arch} ---"

            # 1. 下载对应架构的 cloudflared 二进制文件
            echo "Downloading cloudflared for ${arch}..."
            curl -L --fail --progress-bar "https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-${arch}" -o "cloudflared-${arch}"
            if [ $? -ne 0 ]; then
              echo "Error: Download failed for ${arch}"
              exit 1
            fi

            # 2. 创建一个临时打包目录，以形成干净的压缩包结构
            PKG_DIR="cf-helper-release-${short_arch}"
            mkdir -p "${PKG_DIR}"
            
            # 3. 复制脚本和二进制文件到打包目录
            cp cf-helper.sh "${PKG_DIR}/"
            mv "cloudflared-${arch}" "${PKG_DIR}/"

            # 4. 在打包前为脚本添加可执行权限
            echo "Setting execute permission on cf-helper.sh"
            chmod +x "${PKG_DIR}/cf-helper.sh"
            
            # 5. 创建 .tar.gz 压缩包
            TAR_NAME="cf-helper-${short_arch}.tar.gz"
            echo "Creating package: ${TAR_NAME}..."
            tar -czvf "release_assets/${TAR_NAME}" "${PKG_DIR}"

            echo "Package for ${short_arch} created successfully."
            echo "" # 添加换行以方便阅读日志
          done

      # 步骤四：创建 Release 并上传打包好的文件
      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          # Release 的标签名，使用工作流执行编号，如 v1, v2
          tag_name: v${{ github.run_number }}
          # Release 的标题
          name: Release v${{ github.run_number }}
          # Release 的描述内容，可以自定义
          body: |
            自动构建的发行版 v${{ github.run_number }}

            此版本包含了适用于不同 CPU 架构的 `cloudflared` 二进制文件和 `cf-helper.sh` 脚本。
            下载后解压即可使用 (`cf-helper.sh` 已包含可执行权限)。

            **包含的附件:**
            - `cf-helper-amd64.tar.gz`: 适用于标准 x86_64 架构的桌面/服务器 (Intel/AMD)
            - `cf-helper-arm64.tar.gz`: 适用于 64 位 ARM 架构 (如树莓派 3/4/5, M1/M2 Mac)
            - `cf-helper-arm.tar.gz`: 适用于 32 位 ARM 架构
          # 指向要上传的文件（在上一步中创建的所有 .tar.gz 文件）
          files: release_assets/*.tar.gz
